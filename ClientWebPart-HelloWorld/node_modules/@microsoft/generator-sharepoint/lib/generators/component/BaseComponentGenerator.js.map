{"version":3,"sources":["generators/component/BaseComponentGenerator.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,iCAAiC;AACjC,gCAAgC;AAChC,gDAAgD;AAChD,iCAAiC;AACjC,6BAA6B;AAE7B,0EAE0C;AAE1C,8DAIoC;AAuBpC,kCAAkC;AAClC,uBAA8B,SAAkC,EAAE,IAAY;IAC5E,SAAS,CAAC,MAAM,CAAC,sBAAsB,EAAE;QACvC,WAAW,EAAE,GAAG,IAAI,cAAc;QAClC,IAAI,EAAE,MAAM;KACb,CAAC,CAAC;IACH,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE;QAChC,WAAW,EAAE,GAAG,IAAI,OAAO;QAC3B,IAAI,EAAE,MAAM;KACb,CAAC,CAAC;IACH,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE;QAC5B,WAAW,EAAE,0DAA0D;QACvE,IAAI,EAAE,MAAM;KACb,CAAC,CAAC;AACL,CAAC;AAbD,sCAaC;AAED,4BAEE,SAAQ,6BAAiC;IASlC,SAAS;QACd,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC;YAE/B,MAAM,mBAAmB,GAAsC;gBAC7D,EAAE,IAAI,EAAE,yBAAyB,EAAE,KAAK,EAAE,MAAM,EAAE;aACnD,CAAC;YACF,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,mBAAmB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;YAC9D,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtD,mBAAmB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAC,CAAC,CAAC;YACnE,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACjB;oBACE,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,eAAe;oBACrB,OAAO,EAAE,YAAY;oBACrB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa;oBACvC,OAAO,EAAE,gBAAgB,IAAI,CAAC,YAAY,QAAQ;oBAClD,QAAQ,EAAE,CAAC,KAAa;wBACtB,MAAM,eAAe,GACnB,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAChD,MAAM,gBAAgB,GAAW,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;wBAC/F,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;4BACrC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,gBAAgB,mBAAmB;kCAC1E,qDAAqD,CAAC,CAAC,CAAC;4BAC5D,MAAM,CAAC,KAAK,CAAC;wBACf,CAAC;wBACD,8EAA8E;wBAC9E,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC9B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,2CAA2C,CAAC,CAAC,CAAC;4BACxE,MAAM,CAAC,KAAK,CAAC;wBACf,CAAC;wBACD,MAAM,CAAC,IAAI,CAAC;oBACd,CAAC;oBACD,iBAAiB;iBAClB;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,sBAAsB;oBAC5B,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB;oBAC9C,OAAO,EAAE,gBAAgB,IAAI,CAAC,YAAY,eAAe;oBACzD,OAAO,EAAE,CAAC,OAET,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,aAAa,cAAc;oBAC1E,iBAAiB;iBAClB;gBACD;oBACE,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC,CAAC;oBAC3E,OAAO,EAAE,wCAAwC;oBACjD,OAAO,EAAE,mBAAmB;iBAC7B;aACF,CAAC,CAAC,IAAI,CAAC,CAAC,OAIR;gBAEC,oCAAoC;gBACpC,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,IAAI,MAAM,CAAC;gBAC/E,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,IAAI,OAAO,CAAC,oBAAoB,IAAI,EAAE,CAAC;gBAC5G,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;gBAEhD,MAAM,eAAe,GACnB,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE9F,IAAI,CAAC,OAAO,CAAC,sBAAsB,GAAG,eAAe,CAAC,sBAAsB,CAAC;gBAC7E,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,eAAe,CAAC,aAAa,CAAC;gBAC3D,IAAI,CAAC,OAAO,CAAC,sBAAsB,GAAG,eAAe,CAAC,sBAAsB,CAAC;gBAC7E,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,eAAe,CAAC,kBAAkB,CAAC;gBACrE,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,eAAe,CAAC,gBAAgB,CAAC;gBACjE,IAAI,CAAC,OAAO,CAAC,2BAA2B,GAAG,eAAe,CAAC,2BAA2B,CAAC;gBACvF,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC;gBAE7D,gDAAgD;gBAChD,MAAM,gBAAgB,GAAW,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;gBAE5F,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACrC,MAAM,IAAI,KAAK,CAAC,eAAe,gBAAgB,mBAAmB;0BAC9D,qDAAqD,CAAC,CAAC;gBAC7D,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,EACD;YACE,8BAA8B;YAC9B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,WAAW;QAChB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAEnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,CAAC;YACH,oCAAoC;YACpC,IAAI,CAAC,UAAU,CAAC,QAAQ,CACtB;gBACE,UAAU,EAAE,CAAC;wBACX,UAAU,EAAE,SAAS,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,sBAAsB,IAAI,IAAI,CAAC,OAAO,CAAC,kBAAkB,KAAK;wBACnH,QAAQ,EAAE,SAAS,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,sBAAsB,IAAI,IAAI,CAAC,OAAO,CAAC,kBAAkB,gBAAgB;qBAC7H,CAAC;aACH,EACD,IAAI,CAAC,OAAO,CAAC,2BAA2B,CACzC,CAAC;YACF,mCAAmC;QACrC,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,kDAAkD;YAClD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,qBAAqB,IAAI,CAAC,YAAY,uBAAuB,CAAC,CAAC,CAAC;YACnF,MAAM,KAAK,CAAC;QACd,CAAC;QAED,MAAM,qBAAqB,GAAW,yCAAmB,CAAC,WAAW,KAAK,QAAQ;YAChF,OAAO,IAAI,CAAC,UAAU,IAAK,IAAI,CAAC,OAAO,CAAC,sBAAuB,kBAAkB;YACjF,GAAG,IAAI,CAAC,UAAU,IAAK,IAAI,CAAC,OAAO,CAAC,sBAAuB,kBAAkB,CAAC;QAEhF,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAAC;IAC7F,CAAC;IAEM,OAAO,CAAC,cAAuB,IAAI;QACxC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrB,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,MAAM,IAAI,GAAW,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;YAEhF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9E,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IAEM,OAAO;QACZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;IAEO,gBAAgB,CAAC,sBAA8B;QACrD,MAAM,CAAC,IAAI,CAAC,IAAI,CACd,IAAI,CAAC,eAAe,EAAE,EACtB,KAAK,EACL,IAAI,CAAC,UAAU,EACf,sBAAsB,CAAC,CAAC;IAC5B,CAAC;IAEO,aAAa;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC;QAED,kCAAkC;QAClC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,IAAW,EAAE,yCAAmB,CAAC,WAAW,CAAC;aAC3E,IAAI,CAAC,YAAY;YAChB,IAAI,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,YAAY,gBAAgB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AA3KD,wDA2KC;AAYD,iCACE,sBAA8B,EAC9B,aAAqB;IAGrB,kDAAkD;IAClD,MAAM,aAAa,GAAW,KAAK,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;IAEtE,kDAAkD;IAClD,MAAM,sBAAsB,GAAW,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAEvE,wDAAwD;IACxD,MAAM,kBAAkB,GAAW,aAAa,GAAG,aAAa,CAAC;IAEjE,+DAA+D;IAC/D,MAAM,gBAAgB,GAAW,kBAAkB,GAAG,SAAS,CAAC;IAEhE,4DAA4D;IAC5D,IAAI,2BAA2B,GAAW,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;IAC/E,MAAM,sBAAsB,GAAW,EAAE,CAAC;IAC1C,EAAE,CAAC,CAAC,2BAA2B,CAAC,MAAM,GAAG,sBAAsB,CAAC,CAAC,CAAC;QAChE,2BAA2B,GAAG,2BAA2B,CAAC,SAAS,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;QAE/F,mDAAmD;QACnD,MAAM,kBAAkB,GAAW,2BAA2B,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1E,EAAE,CAAC,CAAC,2BAA2B,CAAC,kBAAkB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAC5D,2BAA2B,GAAG,2BAA2B,CAAC,SAAS,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAC7F,CAAC;IACH,CAAC;IAED,yEAAyE;IACzE,IAAI,cAAc,GAAW,kBAAkB,CAAC;IAChD,MAAM,gBAAgB,GAAW,EAAE,CAAC;IACpC,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,gBAAgB,CAAC,CAAC,CAAC;QAC7C,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACjE,CAAC;IAED,MAAM,CAAC;QACL,sBAAsB;QACtB,aAAa;QACb,sBAAsB;QACtB,kBAAkB;QAClB,gBAAgB;QAChB,2BAA2B;QAC3B,cAAc;KACf,CAAC;AACJ,CAAC;AA9CD,0DA8CC","file":"generators/component/BaseComponentGenerator.js","sourcesContent":["import * as chalk from 'chalk';\r\nimport * as colors from 'colors';\r\nimport * as fsx from 'fs-extra';\r\nimport * as Utils from '../../common/utilities';\r\nimport * as lodash from 'lodash';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  YeomanConfiguration\r\n} from '../../common/YeomanConfiguration';\r\n\r\nimport {\r\n  BaseGenerator,\r\n  IBaseOptions,\r\n  AvailableFrameworks\r\n} from '../../common/BaseGenerator';\r\n\r\nexport interface IBaseComponentShared {\r\n  framework: AvailableFrameworks;\r\n  componentDescription: string;\r\n}\r\n\r\nexport interface IBaseComponentOptions extends IBaseComponentShared, IBaseOptions {\r\n  componentName: string;\r\n  creatingSolution: boolean;\r\n}\r\n\r\nexport interface IBaseComponentContext extends IBaseComponentShared {\r\n  componentId: string;\r\n  componentName: string;               // \"DetailsList\"\r\n  componentNameCamelCase: string;      // \"detailsList\"\r\n  componentClassName: string;          // \"DetailsListWebPart\"\r\n  componentClassNameKebabCase: string; // \"details-list-web-part\"\r\n  componentAlias: string;              // \"ReallyLongComponentAliasApplicationCusto\" (note this can be truncated)\r\n  componentStrings: string;\r\n  componentNameUnescaped: string;\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function defineOptions(generator: BaseGenerator<any, any>, type: string): void {\r\n  generator.option('componentDescription', {\r\n    description: `${type} description`,\r\n    type: String\r\n  });\r\n  generator.option('componentName', {\r\n    description: `${type} name`,\r\n    type: String\r\n  });\r\n  generator.option('framework', {\r\n    description: 'Framework to use. Available: \"none\", \"react\", \"knockout\"',\r\n    type: String\r\n  });\r\n}\r\n\r\nexport abstract class\r\n  BaseComponentGenerator<IOptions extends IBaseComponentOptions, IContext extends IBaseComponentContext>\r\n  extends BaseGenerator<IOptions, IContext> {\r\n  /** The friendly name of this component, which appears in the UI */\r\n  protected abstract readonly friendlyName: string;\r\n  /** The class extension of the component. Is used for the alias in manifest and class name in templates */\r\n  protected abstract readonly codeName: string;\r\n  /** The name of the folder that this comonent should have its template copied to */\r\n  protected abstract readonly folderName: string;\r\n  protected abstract readonly allowedFrameworks: AvailableFrameworks[];\r\n\r\n  public prompting(): Promise<void> {\r\n    return this.checkSolution().then(() => {\r\n\r\n      const availableFrameworks: [{ name: string, value: string }] = [\r\n        { name: 'No JavaScript framework', value: 'none' }\r\n      ];\r\n      if (this.allowedFrameworks.indexOf('react') !== -1) {\r\n        availableFrameworks.push({ name: 'React', value: 'react' });\r\n      }\r\n      if (this.allowedFrameworks.indexOf('knockout') !== -1) {\r\n        availableFrameworks.push({ name: 'Knockout', value: 'knockout'});\r\n      }\r\n\r\n      return this.prompt([\r\n        {\r\n          type: 'input',\r\n          name: 'componentName',\r\n          default: 'HelloWorld',\r\n          when: () => !this.options.componentName,\r\n          message: `What is your ${this.friendlyName} name?`,\r\n          validate: (input: string) => {\r\n            const normalizedNames: INormalizedComponentNames =\r\n              normalizeComponentNames(input, this.codeName);\r\n            const outputFolderPath: string = this._getOutputFolder(normalizedNames.componentNameCamelCase);\r\n            if (fsx.existsSync(outputFolderPath)) {\r\n              console.log(colors.yellow(`\\nThe folder \"${outputFolderPath}\" already exists.`\r\n                + ` Please choose a different name for your component.`));\r\n              return false;\r\n            }\r\n            // disallow quotes, since this will mess with the JSON we put this string into\r\n            if (input.indexOf('\"') !== -1) {\r\n              console.log(colors.yellow(`\\nDo not use double quotes in your title.`));\r\n              return false;\r\n            }\r\n            return true;\r\n          }\r\n          // required: true\r\n        },\r\n        {\r\n          type: 'input',\r\n          name: 'componentDescription',\r\n          when: () => !this.options.componentDescription,\r\n          message: `What is your ${this.friendlyName} description?`,\r\n          default: (answers: {\r\n            componentName: string\r\n          }) => `${this.options.componentName || answers.componentName} description`\r\n          // required: true\r\n        },\r\n        {\r\n          type: 'list',\r\n          name: 'framework',\r\n          when: () => (!this.options.framework) && (availableFrameworks.length !== 1),\r\n          message: 'Which framework would you like to use?',\r\n          choices: availableFrameworks\r\n        }\r\n      ]).then((answers: {\r\n        componentName: string;\r\n        componentDescription: string;\r\n        framework: 'react' | 'knockout' | 'none';\r\n      }) => {\r\n\r\n        /* tslint:disable:max-line-length */\r\n        this.context.framework = this.options.framework || answers.framework || 'none';\r\n        this.context.componentDescription = this.options.componentDescription || answers.componentDescription || '';\r\n        this.context.componentId = Utils.generateGuid();\r\n\r\n        const normalizedNames: INormalizedComponentNames =\r\n          normalizeComponentNames(this.options.componentName || answers.componentName, this.codeName);\r\n\r\n        this.context.componentNameUnescaped = normalizedNames.componentNameUnescaped;\r\n        this.context.componentName = normalizedNames.componentName;\r\n        this.context.componentNameCamelCase = normalizedNames.componentNameCamelCase;\r\n        this.context.componentClassName = normalizedNames.componentClassName;\r\n        this.context.componentStrings = normalizedNames.componentStrings;\r\n        this.context.componentClassNameKebabCase = normalizedNames.componentClassNameKebabCase;\r\n        this.context.componentAlias = normalizedNames.componentAlias;\r\n\r\n        // the folder where we will drop the information\r\n        const outputFolderPath: string = this._getOutputFolder(this.context.componentNameCamelCase);\r\n\r\n        if (fsx.existsSync(outputFolderPath)) {\r\n          throw new Error(`The folder \"${outputFolderPath}\" already exists.`\r\n            + ` Please choose a different name for your component.`);\r\n        }\r\n      });\r\n    },\r\n    () => {\r\n      // Gracefully handle the error\r\n      return Promise.reject(undefined);\r\n    });\r\n  }\r\n\r\n  public configuring(): void {\r\n    this.ensureDependencyGroup(this.context.framework);\r\n\r\n    if (!this.configJson.data) {\r\n      throw new Error(`Missing required file: \"config/config.json\"`);\r\n    }\r\n\r\n    try {\r\n      /* tslint:disable:max-line-length */\r\n      this.configJson.addEntry(\r\n        {\r\n          components: [{\r\n            entrypoint: `./lib/${this.folderName}/${this.context.componentNameCamelCase}/${this.context.componentClassName}.js`,\r\n            manifest: `./src/${this.folderName}/${this.context.componentNameCamelCase}/${this.context.componentClassName}.manifest.json`\r\n          }]\r\n        },\r\n        this.context.componentClassNameKebabCase\r\n      );\r\n      /* tslint:enable:max-line-length */\r\n    } catch (error) {\r\n      // @todo move this error to occur during prompting\r\n      this.log(chalk.red(`Cannot create two ${this.friendlyName}s with the same name.`));\r\n      throw error;\r\n    }\r\n\r\n    const localizedResourcePath: string = YeomanConfiguration.environment !== 'onprem' ?\r\n      `lib/${this.folderName}/${ this.context.componentNameCamelCase }/loc/{locale}.js` :\r\n      `${this.folderName}/${ this.context.componentNameCamelCase }/loc/{locale}.js`;\r\n\r\n    this.configJson.addLocalizedResource(this.context.componentStrings, localizedResourcePath);\r\n  }\r\n\r\n  public writing(shouldWrite: boolean = true): void {\r\n    super.writing(false);\r\n    if (shouldWrite) {\r\n      const dest: string = this._getOutputFolder(this.context.componentNameCamelCase);\r\n\r\n      this.copyTemplate(path.join(this.sourceRoot(), this.context.framework), dest);\r\n      this.copyTemplate(path.join(this.sourceRoot(), 'base'), dest);\r\n    }\r\n  }\r\n\r\n  public install(): void {\r\n    if (!this.tryInstall()) {\r\n      this.log();\r\n      this.log(`Skipping installation of dependencies. You should run \"npm install\"`);\r\n    }\r\n  }\r\n\r\n  private _getOutputFolder(componentNameCamelCase: string): string {\r\n    return path.join(\r\n      this.destinationRoot(),\r\n      'src',\r\n      this.folderName,\r\n      componentNameCamelCase);\r\n  }\r\n\r\n  private checkSolution(): Promise<void> {\r\n    if (this.options.creatingSolution) {\r\n      return Promise.resolve(undefined);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-any\r\n    return Utils.checkSolutionFolder(this as any, YeomanConfiguration.libraryName)\r\n      .then(solutionName => {\r\n        this.log(`Add new ${this.friendlyName} to solution ${chalk.cyan(solutionName)}.`);\r\n      });\r\n  }\r\n}\r\n\r\nexport interface INormalizedComponentNames {\r\n  componentNameUnescaped: string;\r\n  componentName: string;\r\n  componentNameCamelCase: string;\r\n  componentClassName: string;\r\n  componentStrings: string;\r\n  componentClassNameKebabCase: string;\r\n  componentAlias: string;\r\n}\r\n\r\nexport function normalizeComponentNames(\r\n  componentNameUnescaped: string,\r\n  componentType: string):\r\n  INormalizedComponentNames {\r\n\r\n  //  title-case:   Hello, World!     =>  HelloWorld\r\n  const componentName: string = Utils.titleCase(componentNameUnescaped);\r\n\r\n  //  camel-case:   HelloWorld        =>  helloWorld\r\n  const componentNameCamelCase: string = lodash.camelCase(componentName);\r\n\r\n  //  class-name:   HelloWorld        => HelloWorldWebPart\r\n  const componentClassName: string = componentName + componentType;\r\n\r\n  //  strings:      HelloWorldWebPart => HelloWorldWebPartStrings\r\n  const componentStrings: string = componentClassName + 'Strings';\r\n\r\n  //  kebab-case:   HelloWorldWebPart =>  hello-world-web-part\r\n  let componentClassNameKebabCase: string = lodash.kebabCase(componentClassName);\r\n  const MAX_BUNDLE_NAME_LENGTH: number = 64;\r\n  if (componentClassNameKebabCase.length > MAX_BUNDLE_NAME_LENGTH) {\r\n    componentClassNameKebabCase = componentClassNameKebabCase.substring(0, MAX_BUNDLE_NAME_LENGTH);\r\n\r\n    //  a trailing - will also cause validation to fail\r\n    const lastCharacterIndex: number = componentClassNameKebabCase.length - 1;\r\n    if (componentClassNameKebabCase[lastCharacterIndex] === '-') {\r\n      componentClassNameKebabCase = componentClassNameKebabCase.substring(0, lastCharacterIndex);\r\n    }\r\n  }\r\n\r\n  // alias based off componentNameTitleCase, but truncate if it is too long\r\n  let componentAlias: string = componentClassName;\r\n  const MAX_ALIAS_LENGTH: number = 40;\r\n  if (componentAlias.length > MAX_ALIAS_LENGTH) {\r\n    componentAlias = componentAlias.substring(0, MAX_ALIAS_LENGTH);\r\n  }\r\n\r\n  return {\r\n    componentNameUnescaped,\r\n    componentName,\r\n    componentNameCamelCase,\r\n    componentClassName,\r\n    componentStrings,\r\n    componentClassNameKebabCase,\r\n    componentAlias\r\n  };\r\n}"],"sourceRoot":"..\\..\\..\\src"}