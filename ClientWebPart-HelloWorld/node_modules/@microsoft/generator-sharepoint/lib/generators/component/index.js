"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const path = require("path");
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = require("../../common/utilities");
const Webpart = require("../webpart");
const Extension = require("../extension");
// tslint:disable-next-line:no-any
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
// tslint:disable-next-line:no-any
function defineOptions(generator) {
    generator.option('componentType', {
        description: `The type of component. Currently "webpart" or "extension"`,
        type: String
    });
    Webpart.defineOptions(generator);
    Extension.defineOptions(generator);
}
exports.defineOptions = defineOptions;
/**
 * This class selects between multiple different types of components for instantiation.
 */
class ComponentSelectorGenerator extends BaseGenerator_1.BaseGenerator {
    constructor() {
        super(...arguments);
        this.friendlyName = 'Component Selection';
    }
    initializing() { }
    prompting() {
        return this.prompt([
            {
                type: 'list',
                name: 'componentType',
                default: 'webpart',
                when: () => !this.options.componentType && !this.options.extensionType,
                message: 'Which type of client-side component to create?',
                choices: [
                    {
                        name: 'WebPart',
                        value: 'webpart'
                    },
                    {
                        name: 'Extension',
                        value: 'extension'
                    }
                ]
            }
        ]).then((answers) => {
            const componentType = answers.componentType || this.options.componentType;
            const commonOptions = {
                'skip-install': this.options['skip-install'],
                framework: this.options.framework,
                componentName: this.options.componentName,
                componentDescription: this.options.componentDescription,
                creatingSolution: this.options.creatingSolution
            };
            if (componentType === 'webpart') {
                const wpOptions = commonOptions;
                Webpart.composeWith(this, wpOptions);
            }
            else if (componentType === 'extension' || this.options.extensionType) {
                const extensionOptions = commonOptions;
                extensionOptions.extensionType = this.options.extensionType;
                Extension.composeWith(this, extensionOptions);
            }
            else {
                this.log(chalk.red(`Invalid componentType: "${componentType}"`));
                if (this.options.extensionType) {
                    this.log(chalk.red(`Invalid extensionType: "${this.options.extensionType}"`));
                }
            }
        });
    }
    configuring() { }
    writing() { }
    install() { }
    end() { }
}
exports.ComponentSelectorGenerator = ComponentSelectorGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = ComponentSelectorGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;

//# sourceMappingURL=index.js.map
