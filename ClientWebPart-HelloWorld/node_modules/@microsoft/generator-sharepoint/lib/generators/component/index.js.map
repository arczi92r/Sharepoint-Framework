{"version":3,"sources":["generators/component/index.ts"],"names":[],"mappings":"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","file":"generators/component/index.js","sourcesContent":["import * as chalk from 'chalk';\r\nimport * as path from 'path';\r\n\r\nimport {\r\n  BaseGenerator\r\n} from '../../common/BaseGenerator';\r\nimport * as Utils from '../../common/utilities';\r\n\r\nimport * as BaseComponent from './BaseComponentGenerator';\r\nimport * as Webpart from '../webpart';\r\nimport * as Extension from '../extension';\r\n\r\nexport interface IComponentSelectorOptions extends Webpart.IWebpartOptions, Extension.IExtensionOptions {\r\n  componentType: 'webpart' | 'extension';\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function composeWith(base: BaseGenerator<any, any>, options: IComponentSelectorOptions): void {\r\n  Utils.compose(path.basename(__dirname), base, options);\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function defineOptions(generator: BaseGenerator<any, any>): void {\r\n  generator.option('componentType', {\r\n    description: `The type of component. Currently \"webpart\" or \"extension\"`,\r\n    type: String\r\n  });\r\n  Webpart.defineOptions(generator);\r\n  Extension.defineOptions(generator);\r\n}\r\n\r\n/**\r\n * This class selects between multiple different types of components for instantiation.\r\n */\r\nexport class ComponentSelectorGenerator extends BaseGenerator<IComponentSelectorOptions, {}> {\r\n  public readonly friendlyName: string = 'Component Selection';\r\n\r\n  public initializing(): void { /* no-op */ }\r\n\r\n  public prompting(): Promise<void> {\r\n    return this.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'componentType',\r\n        default: 'webpart',\r\n        when: () => !this.options.componentType && !this.options.extensionType,\r\n        message: 'Which type of client-side component to create?',\r\n        choices: [\r\n          {\r\n            name: 'WebPart',\r\n            value: 'webpart'\r\n          },\r\n          {\r\n            name: 'Extension',\r\n            value: 'extension'\r\n          }\r\n        ]\r\n      }\r\n    ]).then((answers: {\r\n      componentType: 'webpart' | 'extension'\r\n    }) => {\r\n      const componentType: string = answers.componentType || this.options.componentType;\r\n\r\n      const commonOptions: BaseComponent.IBaseComponentOptions = {\r\n        'skip-install': this.options['skip-install'],\r\n        framework: this.options.framework,\r\n        componentName: this.options.componentName,\r\n        componentDescription: this.options.componentDescription,\r\n        creatingSolution: this.options.creatingSolution\r\n      };\r\n\r\n      if (componentType === 'webpart') {\r\n        const wpOptions: Webpart.IWebpartOptions = commonOptions;\r\n        Webpart.composeWith(this, wpOptions);\r\n      } else if (componentType === 'extension' || this.options.extensionType) {\r\n        const extensionOptions: Extension.IExtensionOptions = commonOptions as Extension.IExtensionOptions;\r\n        extensionOptions.extensionType = this.options.extensionType;\r\n        Extension.composeWith(this, extensionOptions);\r\n      } else {\r\n        this.log(chalk.red(`Invalid componentType: \"${componentType}\"`));\r\n        if (this.options.extensionType) {\r\n          this.log(chalk.red(`Invalid extensionType: \"${this.options.extensionType}\"`));\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public configuring(): void { /* no-op */ }\r\n  public writing(): void { /* no-op */ }\r\n  public install(): void { /* no-op */ }\r\n  public end(): void { /* no-op */ }\r\n}\r\n\r\n// Yeoman expects exports of this type, which overrides the TS exports above\r\n// Ensure that anything marked as export above is also listed here\r\nmodule.exports = ComponentSelectorGenerator;\r\nmodule.exports.defineOptions = defineOptions;\r\nmodule.exports.composeWith = composeWith;"],"sourceRoot":"..\\..\\..\\src"}