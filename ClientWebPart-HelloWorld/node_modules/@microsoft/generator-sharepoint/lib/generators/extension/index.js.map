{"version":3,"sources":["generators/extension/index.ts"],"names":[],"mappings":"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","file":"generators/extension/index.js","sourcesContent":["import * as chalk from 'chalk';\r\nimport * as path from 'path';\r\n\r\nimport { BaseGenerator } from '../../common/BaseGenerator';\r\nimport * as Utils from '../../common/utilities';\r\nimport * as FieldCustomizer from '../fieldCustomizer';\r\nimport * as CommandSet from '../commandSet';\r\nimport * as ApplicationCustomizer from '../applicationCustomizer';\r\n\r\nimport * as BaseExtension from './BaseExtensionGenerator';\r\n\r\nexport interface IExtensionOptions\r\n  extends FieldCustomizer.IFieldCustomizerOptions,\r\n          CommandSet.ICommandSetOptions,\r\n          ApplicationCustomizer.IApplicationCustomizerOptions {\r\n  extensionType: BaseExtension.AvailableExtensions;\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function defineOptions(generator: BaseGenerator<any, any>): void {\r\n  FieldCustomizer.defineOptions(generator);\r\n  CommandSet.defineOptions(generator);\r\n  generator.option('extensionType', {\r\n    description: `The type of extension. Currently \"ApplicationCustomizer\", \"FieldCustomizer\", or \"ListViewCommandSet\"`,\r\n    type: String\r\n  });\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function composeWith(base: BaseGenerator<any, any>, options: IExtensionOptions): void {\r\n  Utils.compose(path.basename(__dirname), base, options);\r\n}\r\n\r\n/**\r\n * This class selects between multiple different types of extensions for instantiation.\r\n */\r\nexport class ExtensionSelectorGenerator extends BaseGenerator<IExtensionOptions, {}> {\r\n  public readonly friendlyName: string = 'Extension Selection';\r\n\r\n  public initializing(): void { /* no-op */ }\r\n\r\n  public prompting(): Promise<void> {\r\n    return this.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'extensionType',\r\n        default: 'ApplicationCustomizer',\r\n        when: () => !this.options.extensionType,\r\n        message: 'Which type of client-side extension to create?',\r\n        choices: [\r\n          {\r\n            name: 'Application Customizer',\r\n            value: 'ApplicationCustomizer'\r\n          },\r\n          {\r\n            name: 'Field Customizer',\r\n            value: 'FieldCustomizer'\r\n          },\r\n          {\r\n            name: 'ListView Command Set',\r\n            value: 'ListViewCommandSet'\r\n          }\r\n        ]\r\n      }\r\n    ]).then((answers: {\r\n      extensionType: BaseExtension.AvailableExtensions\r\n    }) => {\r\n      const extensionType: string = answers.extensionType || this.options.extensionType;\r\n\r\n      const commonOptions: BaseExtension.IBaseExtensionOptions = {\r\n        'skip-install': this.options['skip-install'],\r\n        framework: this.options.framework,\r\n        componentName: this.options.componentName,\r\n        componentDescription: this.options.componentDescription,\r\n        creatingSolution: this.options.creatingSolution\r\n      };\r\n\r\n      if (extensionType === 'FieldCustomizer') {\r\n        const fieldCustomizerOptions: FieldCustomizer.IFieldCustomizerOptions = commonOptions;\r\n        FieldCustomizer.composeWith(this, fieldCustomizerOptions);\r\n      } else if (extensionType === 'ListViewCommandSet') {\r\n        const commandSetOptions: CommandSet.ICommandSetOptions = commonOptions;\r\n        CommandSet.composeWith(this, commandSetOptions);\r\n      } else if (extensionType === 'ApplicationCustomizer') {\r\n        const appCustomizerOptions: ApplicationCustomizer.IApplicationCustomizerOptions = commonOptions;\r\n        ApplicationCustomizer.composeWith(this, appCustomizerOptions);\r\n      } else {\r\n        this.log(chalk.red(`Invalid extensionType: \"${extensionType}\"`));\r\n      }\r\n    });\r\n  }\r\n\r\n  public configuring(): void { /* no-op */ }\r\n  public writing(): void { /* no-op */ }\r\n  public install(): void { /* no-op */ }\r\n  public end(): void { /* no-op */ }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  protected constructor(args: string | string[], options: any) {\r\n    super(args, options);\r\n  }\r\n}\r\n\r\n// Yeoman expects exports of this type, which overrides the TS exports above\r\n// Ensure that anything marked as export above is also listed here\r\nmodule.exports = ExtensionSelectorGenerator;\r\nmodule.exports.defineOptions = defineOptions;\r\nmodule.exports.composeWith = composeWith;"],"sourceRoot":"..\\..\\..\\src"}