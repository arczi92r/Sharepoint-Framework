{"version":3,"sources":["generators/applicationCustomizer/index.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAM7B,gDAAgD;AAEhD,qEAAqE;AAKrE,kCAAkC;AAClC,qBAA4B,IAA6B,EAAE,OAAsC;IAC/F,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACzD,CAAC;AAFD,kCAEC;AAED,kCAAkC;AAClC,uBAA8B,SAAkC;IAC9D,aAAa,CAAC,aAAa,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;AACnE,CAAC;AAFD,sCAEC;AAED,oCACE,SAAQ,aAAa,CAAC,sBAAoF;IAsC1G,kCAAkC;IAClC,YAAsB,IAAuB,EAAE,OAAY;QACzD,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAvCJ,iBAAY,GAAW,wBAAwB,CAAC;QAChD,aAAQ,GAAW,uBAAuB,CAAC;QAC3C,sBAAiB,GAA0B,EAAE,CAAC;QAsC/D,aAAa,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IArCM,YAAY,KAAuB,CAAC;IAEpC,SAAS;QACd,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAC3B,CAAC;IAEM,WAAW;QAChB,KAAK,CAAC,WAAW,EAAE,CAAC;QACpB,IAAI,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QAEpD,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;YACnE,OAAO,EAAE,mEAAmE;YAC5E,aAAa,EAAE;gBACb,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;oBAC1B,QAAQ,EAAE,2CAA2C;oBACrD,UAAU,EAAE;wBACV,WAAW,EAAE,cAAc;qBAC5B;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC;IAEM,OAAO;QACZ,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;IAEM,OAAO;QACZ,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;IAEM,GAAG,KAAsB,CAAC;CAOlC;AA5CD,wEA4CC;AAED,4EAA4E;AAC5E,kEAAkE;AAClE,MAAM,CAAC,OAAO,GAAG,8BAA8B,CAAC;AAChD,MAAM,CAAC,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AAC7C,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC","file":"generators/applicationCustomizer/index.js","sourcesContent":["import * as path from 'path';\r\n\r\nimport {\r\n  BaseGenerator,\r\n  AvailableFrameworks\r\n} from '../../common/BaseGenerator';\r\nimport * as Utils from '../../common/utilities';\r\n\r\nimport * as BaseExtension from '../extension/BaseExtensionGenerator';\r\n\r\nexport interface IApplicationCustomizerOptions extends BaseExtension.IBaseExtensionOptions {}\r\nexport interface IApplicationCustomizerContext extends BaseExtension.IBaseExtensionContext {}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function composeWith(base: BaseGenerator<any, any>, options: IApplicationCustomizerOptions): void {\r\n  Utils.compose(path.basename(__dirname), base, options);\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function defineOptions(generator: BaseGenerator<any, any>): void {\r\n  BaseExtension.defineOptions(generator, 'Application Customizer');\r\n}\r\n\r\nexport class ApplicationCustomizerGenerator\r\n  extends BaseExtension.BaseExtensionGenerator<IApplicationCustomizerOptions, IApplicationCustomizerContext> {\r\n  protected readonly friendlyName: string = 'Application Customizer';\r\n  protected readonly codeName: string = 'ApplicationCustomizer';\r\n  protected readonly allowedFrameworks: AvailableFrameworks[] = [];\r\n\r\n  public initializing(): void { /* no-op */ }\r\n\r\n  public prompting(): Promise<void> {\r\n    return super.prompting();\r\n  }\r\n\r\n  public configuring(): void {\r\n    super.configuring();\r\n    this.ensureDependencyGroup('applicationCustomizer');\r\n\r\n    this.serveJson.addConfiguration(this.context.componentNameCamelCase, {\r\n      pageUrl: 'https://contoso.sharepoint.com/sites/mySite/SitePages/myPage.aspx',\r\n      customActions: {\r\n        [this.context.componentId]: {\r\n          location: 'ClientSideExtension.ApplicationCustomizer',\r\n          properties: {\r\n            testMessage: 'Test message'\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public writing(): void {\r\n    super.writing();\r\n  }\r\n\r\n  public install(): void {\r\n    super.install();\r\n  }\r\n\r\n  public end(): void { /* no-op */}\r\n\r\n  // tslint:disable-next-line:no-any\r\n  protected constructor(args: string | string[], options: any) {\r\n    super(args, options);\r\n    defineOptions(this);\r\n  }\r\n}\r\n\r\n// Yeoman expects exports of this type, which overrides the TS exports above\r\n// Ensure that anything marked as export above is also listed here\r\nmodule.exports = ApplicationCustomizerGenerator;\r\nmodule.exports.defineOptions = defineOptions;\r\nmodule.exports.composeWith = composeWith;\r\n"],"sourceRoot":"..\\..\\..\\src"}