"use strict";
/// <reference types="package-json" />
Object.defineProperty(exports, "__esModule", { value: true });
const lodash = require("lodash");
const path = require("path");
const Utils = require("../../common/utilities");
const BaseGenerator_1 = require("../../common/BaseGenerator");
const YeomanConfiguration_1 = require("../../common/YeomanConfiguration");
// tslint:disable-next-line:no-any
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
// tslint:disable-next-line:no-any
function defineOptions(generator) {
    generator.option('solutionName', {
        description: 'Solution name, as well as folder name',
        type: String
    });
    generator.option('framework', {
        description: 'Framework to use. Available: "none", "react", "knockout"',
        type: String
    });
    generator.option('environment', {
        description: 'The target environment for the solution. Either “onprem” or “spo”.',
        type: String
    });
    generator.argument('skipFeatureDeployment', {
        description: 'If specified, allow the tenant admin the choice of being able to' +
            'deploy the components to all sites immediately without running any ' +
            'feature deployment or adding apps in sites',
        type: Boolean,
        required: false,
        // tslint:disable-next-line:no-null-keyword
        default: null
    }); // tslint:disable-line:no-any
}
exports.defineOptions = defineOptions;
class SolutionGenerator extends BaseGenerator_1.BaseGenerator {
    /* tslint:disable-next-line:no-any */
    constructor(args, options) {
        super(args, options);
        this.allowEmptyPackageJson = true;
        this.friendlyName = 'Solution';
        defineOptions(this);
    }
    initializing() { }
    prompting() {
        return this.prompt([
            {
                type: 'input',
                name: 'solutionName',
                default: lodash.kebabCase(this.appname),
                when: () => !this.options.solutionName,
                message: 'What is your solution name?'
            },
            {
                type: 'list',
                name: 'environment',
                when: () => !this.options.environment,
                message: 'Which baseline packages do you want to target for your component(s)?',
                default: 'spo',
                choices: [
                    { name: 'SharePoint Online only (latest)', value: 'spo' },
                    { name: 'SharePoint 2016 onwards, including SharePoint Online', value: 'onprem' }
                ]
            },
            {
                type: 'list',
                name: 'whichFolder',
                default: 'current',
                when: () => !this.options.solutionName,
                message: 'Where do you want to place the files?',
                choices: [
                    {
                        name: 'Use the current folder',
                        value: 'current'
                    },
                    {
                        name: 'Create a subfolder with solution name',
                        value: 'subdir'
                    }
                ]
            }
        ]).then((answers) => {
            // Use a sub-dir if they pass solutionName in via option
            this.context.solutionName = this.options.solutionName || answers.solutionName;
            const shouldUseSubDir = answers.whichFolder === 'subdir' || !!this.options.solutionName;
            if (shouldUseSubDir) {
                this.destinationRoot(this.destinationPath(this.context.solutionName));
            }
            // Yeoman uses the destinationRoot at the time of instantiation when determining
            // where to write the .yo-rc file, however we want to change the destinationRoot
            // after. Once we change the destinationRoot, the base class instantiates a new
            // storage object. We have a helper class using the storage object, so we need
            // to reset it to use the new object.
            // tslint:disable-next-line:no-string-literal
            YeomanConfiguration_1.YeomanConfiguration.setStore(this['config']);
            this.context.libraryName = lodash.kebabCase(this.context.solutionName);
            this.context.libraryId = Utils.generateGuid();
            // store some variables
            YeomanConfiguration_1.YeomanConfiguration.version = BaseGenerator_1.BaseGenerator.generatorPackageJson.version;
            YeomanConfiguration_1.YeomanConfiguration.libraryName = this.context.libraryName;
            YeomanConfiguration_1.YeomanConfiguration.libraryId = this.context.libraryId;
            YeomanConfiguration_1.YeomanConfiguration.environment = this.options.environment || answers.environment;
        }).then(() => {
            return this.prompt([
                {
                    type: 'confirm',
                    name: 'skipFeatureDeployment',
                    default: false,
                    // tslint:disable-next-line:no-null-keyword
                    when: () => YeomanConfiguration_1.YeomanConfiguration.environment !== 'onprem' && this.options.skipFeatureDeployment === null,
                    message: 'Do you want to allow the tenant admin the choice of being able ' +
                        'to deploy the solution to all sites immediately without running ' +
                        'any feature deployment or adding apps in sites?'
                }
            ]);
        }).then((answers) => {
            // tslint:disable-next-line:no-null-keyword
            this.context.skipFeatureDeployment = this.options.skipFeatureDeployment !== null ?
                this.options.skipFeatureDeployment : answers.skipFeatureDeployment;
            // make sure we store the value of skipFeatureDeployment
            this.packageSolutionJson.setUpSolution(this.context);
        });
    }
    configuring() {
        const packageJsonTemplate = require('./initial.package.json');
        if (this.packageJson.data) {
            this.log(`Overwriting an existing "package.json"`);
        }
        packageJsonTemplate.name = this.context.libraryName;
        this.packageJson.set(packageJsonTemplate);
        this.ensureDependencyGroup('none');
        if (this.configJson.data) {
            this.log(`Overwriting an existing "config.json"`);
        }
        // SPFx OnPrem requires v1 config files.
        if (YeomanConfiguration_1.YeomanConfiguration.environment === 'onprem') {
            // tslint:disable-next-line:no-any
            this.configJson.set({
                entries: [],
                externals: {},
                localizedResources: {}
            });
            this.configJson.configJsonIsV1 = true;
        }
        else {
            this.configJson.set({
                '$schema': 'https://dev.office.com/json-schemas/spfx-build/config.2.0.schema.json',
                version: '2.0',
                bundles: {},
                externals: {},
                localizedResources: {}
            });
        }
    }
    writing() {
        super.writing(false);
        const dest = this.destinationRoot();
        this.copyTemplate(path.join(this.sourceRoot(), YeomanConfiguration_1.YeomanConfiguration.environment), dest);
        this.copyTemplate(path.join(this.sourceRoot(), 'base'), dest);
        this.packageJson.save();
        this.configJson.save();
        this.packageSolutionJson.save();
    }
    install() {
        this.tryInstall();
    }
    end() { }
}
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = SolutionGenerator;
module.exports.composeWith = composeWith;
module.exports.defineOptions = defineOptions;

//# sourceMappingURL=index.js.map
