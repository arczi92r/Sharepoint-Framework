import { BaseGenerator, AvailableFrameworks } from '../../common/BaseGenerator';
import * as BaseExtension from '../extension/BaseExtensionGenerator';
export interface ICommandSetOptions extends BaseExtension.IBaseExtensionOptions {
}
export interface ICommandSetContext extends BaseExtension.IBaseExtensionContext {
}
export declare function composeWith(base: BaseGenerator<any, any>, options: ICommandSetOptions): void;
export declare function defineOptions(generator: BaseGenerator<any, any>): void;
export declare class CommandSetGenerator extends BaseExtension.BaseExtensionGenerator<ICommandSetOptions, ICommandSetContext> {
    protected readonly friendlyName: string;
    protected readonly codeName: string;
    protected readonly allowedFrameworks: AvailableFrameworks[];
    initializing(): void;
    prompting(): Promise<void>;
    configuring(): void;
    writing(): void;
    install(): void;
    end(): void;
    protected constructor(args: string | string[], options: any);
}
