"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Utils = require("../../common/utilities");
const BaseExtension = require("../extension/BaseExtensionGenerator");
// tslint:disable-next-line:no-any
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
// tslint:disable-next-line:no-any
function defineOptions(generator) {
    BaseExtension.defineOptions(generator, 'Command Set');
}
exports.defineOptions = defineOptions;
class CommandSetGenerator extends BaseExtension.BaseExtensionGenerator {
    // tslint:disable-next-line:no-any
    constructor(args, options) {
        super(args, options);
        this.friendlyName = 'Command Set';
        this.codeName = 'CommandSet';
        this.allowedFrameworks = [];
        defineOptions(this);
    }
    initializing() { }
    prompting() {
        return super.prompting();
    }
    configuring() {
        super.configuring();
        this.ensureDependencyGroup('commandSet');
        this.serveJson.addConfiguration(this.context.componentNameCamelCase, {
            pageUrl: 'https://contoso.sharepoint.com/sites/mySite/SitePages/myPage.aspx',
            customActions: {
                [this.context.componentId]: {
                    location: 'ClientSideExtension.ListViewCommandSet.CommandBar',
                    properties: {
                        sampleTextOne: 'One item is selected in the list',
                        sampleTextTwo: 'This command is always visible.'
                    }
                }
            }
        });
    }
    writing() {
        super.writing();
    }
    install() {
        super.install();
    }
    end() { }
}
exports.CommandSetGenerator = CommandSetGenerator;
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = CommandSetGenerator;
module.exports.defineOptions = defineOptions;
module.exports.composeWith = composeWith;

//# sourceMappingURL=index.js.map
