"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const path = require("path");
const yosay = require("yosay");
const spsay_1 = require("../../common/spsay");
const BaseGenerator_1 = require("../../common/BaseGenerator");
const Utils = require("../../common/utilities");
const YeomanConfiguration_1 = require("../../common/YeomanConfiguration");
const Solution = require("../solution");
const Component = require("../component");
const OnPremComponent = require("../onPremComponent");
// tslint:disable-next-line:no-any
function composeWith(base, options) {
    Utils.compose(path.basename(__dirname), base, options);
}
exports.composeWith = composeWith;
/**
 * This class is the entry point when running `yo @microsoft/sharepoint`
 */
class AppGenerator extends BaseGenerator_1.BaseGenerator {
    /* tslint:disable-next-line:no-any */
    constructor(args, options) {
        super(args, options);
        this.friendlyName = 'SharePoint Client-side Solution Generator';
        this.allowEmptyPackageJson = true;
        this.desc('Generate a SharePoint client-side solution with webparts.');
        Component.defineOptions(this);
        OnPremComponent.defineOptions(this);
        Solution.defineOptions(this);
    }
    initializing() {
        this.log(yosay('Welcome to the ' + chalk.blue('SharePoint Client-side Solution Generator')));
        this._explainArguments();
        this.context.creatingSolution = !YeomanConfiguration_1.YeomanConfiguration.libraryName;
    }
    prompting() {
        // Configure the solution root folder before other composition.
        if (this.context.creatingSolution) {
            // Create solution because not in a solution folder
            this.log(`Let's create a new SharePoint solution.`);
            // Config destination root before composition.
            Solution.composeWith(this, {
                'skip-install': this.options['skip-install'],
                solutionName: this.options.solutionName,
                environment: this.options.environment,
                skipFeatureDeployment: this.options.skipFeatureDeployment
            });
        }
    }
    configuring() {
        // tslint:disable-next-line:no-any
        const options = {
            'skip-install': this.options['skip-install'],
            componentType: YeomanConfiguration_1.YeomanConfiguration.environment === 'onprem' ? 'webpart' : this.options.componentType,
            extensionType: this.options.extensionType,
            creatingSolution: this.context.creatingSolution,
            framework: this.options.framework,
            componentName: this.options.componentName,
            componentDescription: this.options.componentDescription
        };
        if (YeomanConfiguration_1.YeomanConfiguration.environment === 'onprem') {
            OnPremComponent.composeWith(this, options);
        }
        else {
            Component.composeWith(this, options);
        }
    }
    writing() { }
    install() { }
    end() {
        const libraryName = YeomanConfiguration_1.YeomanConfiguration.libraryName;
        this.log(spsay_1.default(libraryName));
    }
    _explainArguments() {
        // If the CLI argument is specified, the corresponding prompting in sub-generators will be skipped.
        // The following calls do similar jobs as prompting. Place them here instead of initializing step.
        if (this.options.solutionName) {
            const solutionName = chalk.cyan(this.options.solutionName);
            this.log(`A folder with solution name ${solutionName} will be created for you.`);
        }
        if (this.options.environment) {
            const environment = chalk.cyan(this.options.environment);
            this.log(`A component for the ${environment} environment will be created for you.`);
        }
        const componentType = this.options.componentType === 'webpart' ? 'web part' :
            this.options.componentType === 'extension' ? 'extension' : 'component';
        const componentTypeUpper = componentType.charAt(0).toUpperCase() + componentType.slice(1);
        if (this.options.componentName) {
            const webpartName = chalk.cyan(this.options.componentName);
            const frameworkWords = this.options.framework && this.options.framework !== 'none'
                ? ' with ' + chalk.cyan(this.options.framework) + ' framework'
                : '';
            this.log(`${componentType === 'extension' ? 'An' : 'A'} ${componentType} with the name ${webpartName}` +
                ` will be added to your solution${frameworkWords}.`);
        }
        if (this.options.componentDescription) {
            const description = chalk.cyan(this.options.componentDescription);
            this.log(`${componentTypeUpper} description is going to be ${description}.`);
        }
    }
}
// Yeoman expects exports of this type, which overrides the TS exports above
// Ensure that anything marked as export above is also listed here
module.exports = AppGenerator;
module.exports.composeWith = composeWith;

//# sourceMappingURL=index.js.map
