{"version":3,"sources":["generators/app/index.ts"],"names":[],"mappings":"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","file":"generators/app/index.js","sourcesContent":["import * as chalk from 'chalk';\r\nimport * as path from 'path';\r\n\r\nimport yosay = require('yosay');\r\nimport spsay from '../../common/spsay';\r\n\r\nimport {\r\n  BaseGenerator,\r\n  IBaseOptions\r\n} from '../../common/BaseGenerator';\r\nimport * as Utils from '../../common/utilities';\r\nimport { YeomanConfiguration } from '../../common/YeomanConfiguration';\r\n\r\nimport * as Solution from '../solution';\r\nimport * as Component from '../component';\r\nimport * as OnPremComponent from '../onPremComponent';\r\n\r\nexport interface IAppContext {\r\n  creatingSolution: boolean;\r\n}\r\n\r\nexport interface IAppOptions extends IBaseOptions, Solution.ISolutionOptions, Component.IComponentSelectorOptions {}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport function composeWith(base: BaseGenerator<any, any>, options: IAppOptions): void {\r\n  Utils.compose(path.basename(__dirname), base, options);\r\n}\r\n\r\n/**\r\n * This class is the entry point when running `yo @microsoft/sharepoint`\r\n */\r\nclass AppGenerator extends BaseGenerator<IAppOptions, IAppContext> {\r\n  protected readonly friendlyName: string = 'SharePoint Client-side Solution Generator';\r\n  protected allowEmptyPackageJson: boolean = true;\r\n\r\n  public initializing(): void {\r\n    this.log(yosay('Welcome to the ' + chalk.blue('SharePoint Client-side Solution Generator')));\r\n    this._explainArguments();\r\n    this.context.creatingSolution = !YeomanConfiguration.libraryName;\r\n  }\r\n  public prompting(): void {\r\n    // Configure the solution root folder before other composition.\r\n    if (this.context.creatingSolution) {\r\n      // Create solution because not in a solution folder\r\n      this.log(`Let's create a new SharePoint solution.`);\r\n\r\n      // Config destination root before composition.\r\n      Solution.composeWith(this, {\r\n        'skip-install': this.options['skip-install'],\r\n        solutionName: this.options.solutionName,\r\n        environment: this.options.environment,\r\n        skipFeatureDeployment: this.options.skipFeatureDeployment\r\n      });\r\n    }\r\n  }\r\n  public configuring(): void {\r\n    // tslint:disable-next-line:no-any\r\n    const options: any = {\r\n      'skip-install': this.options['skip-install'],\r\n      componentType: YeomanConfiguration.environment === 'onprem' ? 'webpart' : this.options.componentType,\r\n      extensionType: this.options.extensionType,\r\n      creatingSolution: this.context.creatingSolution,\r\n      framework: this.options.framework,\r\n      componentName: this.options.componentName,\r\n      componentDescription: this.options.componentDescription\r\n    };\r\n    if (YeomanConfiguration.environment === 'onprem') {\r\n      OnPremComponent.composeWith(this, options);\r\n    } else {\r\n      Component.composeWith(this, options);\r\n    }\r\n  }\r\n  public writing(): void { /* no-op */ }\r\n  public install(): void { /* no-op */ }\r\n\r\n  public end(): void {\r\n    const libraryName: string = YeomanConfiguration.libraryName;\r\n    this.log(spsay(libraryName));\r\n  }\r\n\r\n  /* tslint:disable-next-line:no-any */\r\n  protected constructor(args: string | string[], options: any) {\r\n    super(args, options);\r\n\r\n    this.desc('Generate a SharePoint client-side solution with webparts.');\r\n\r\n    Component.defineOptions(this);\r\n    OnPremComponent.defineOptions(this);\r\n    Solution.defineOptions(this);\r\n  }\r\n\r\n  private _explainArguments(): void {\r\n    // If the CLI argument is specified, the corresponding prompting in sub-generators will be skipped.\r\n    // The following calls do similar jobs as prompting. Place them here instead of initializing step.\r\n\r\n    if (this.options.solutionName) {\r\n      const solutionName: string = chalk.cyan(this.options.solutionName);\r\n      this.log(`A folder with solution name ${solutionName} will be created for you.`);\r\n    }\r\n\r\n    if (this.options.environment) {\r\n      const environment: string = chalk.cyan(this.options.environment);\r\n      this.log(`A component for the ${environment} environment will be created for you.`);\r\n    }\r\n\r\n    const componentType: string = this.options.componentType === 'webpart' ? 'web part' :\r\n                          this.options.componentType === 'extension' ? 'extension' : 'component';\r\n    const componentTypeUpper: string = componentType.charAt(0).toUpperCase() + componentType.slice(1);\r\n\r\n    if (this.options.componentName) {\r\n      const webpartName: string = chalk.cyan(this.options.componentName);\r\n      const frameworkWords: string = this.options.framework && this.options.framework !== 'none'\r\n        ? ' with ' + chalk.cyan(this.options.framework) + ' framework'\r\n        : '';\r\n\r\n      this.log(`${componentType === 'extension' ? 'An' : 'A'} ${componentType} with the name ${webpartName}` +\r\n        ` will be added to your solution${frameworkWords}.`);\r\n    }\r\n\r\n    if (this.options.componentDescription) {\r\n      const description: string = chalk.cyan(this.options.componentDescription);\r\n      this.log(`${componentTypeUpper} description is going to be ${description}.`);\r\n    }\r\n  }\r\n}\r\n\r\n// Yeoman expects exports of this type, which overrides the TS exports above\r\n// Ensure that anything marked as export above is also listed here\r\nmodule.exports = AppGenerator;\r\nmodule.exports.composeWith = composeWith;"],"sourceRoot":"..\\..\\..\\src"}