{"version":3,"sources":["common/ConfigJsonManager.ts"],"names":[],"mappings":"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","file":"common/ConfigJsonManager.js","sourcesContent":["import * as yeoman from 'yeoman-generator';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  IConfigJson,\r\n  IConfigBundle\r\n} from '@microsoft/sp-build-core-tasks';\r\nimport {\r\n  IConfigEntry,\r\n  IConfigJson as IV1ConfigJson\r\n} from '@microsoft/sp-build-core-tasks/lib/configJson/interfaces/config-v1';\r\n\r\nimport { JsonManager } from './JsonManager';\r\n\r\nexport class ConfigJsonManager extends JsonManager<IConfigJson | IV1ConfigJson> {\r\n  private static _instance: ConfigJsonManager;\r\n\r\n  public static load(\r\n    filepath: string,\r\n    fs: yeoman.MemFsEditor\r\n  ): void {\r\n    if (this._instance) {\r\n      throw new Error(`Cannot create a second instance of ConfigJsonManager`);\r\n    }\r\n\r\n    let configJson: IConfigJson | IV1ConfigJson = undefined;\r\n    let configJsonIsV1: boolean = false;\r\n    if (fs.exists(filepath)) {\r\n      try {\r\n        configJson = JsonFile.load(filepath);\r\n        configJsonIsV1 = (configJson as IConfigJson).version === undefined;\r\n\r\n      } catch (e) {\r\n        throw new Error(`Error reading config.json file: ${e}`);\r\n      }\r\n    }\r\n\r\n    ConfigJsonManager._instance = new ConfigJsonManager(filepath, fs, configJson, configJsonIsV1);\r\n  }\r\n\r\n  public static reset(): void {\r\n    ConfigJsonManager._instance = undefined;\r\n  }\r\n\r\n  public static get instance(): ConfigJsonManager {\r\n    return this._instance;\r\n  }\r\n\r\n  public addEntry(bundleEntry: IConfigBundle, name: string): void  {\r\n    if (this.configJsonIsV1) {\r\n      const v1Entry: IConfigEntry = this._translateV2BundleIntoV1(bundleEntry, name);\r\n      const existingConfig: IV1ConfigJson = this._data as IV1ConfigJson;\r\n\r\n      existingConfig.entries.forEach((existingEntry: IConfigEntry) => {\r\n        if (existingEntry.manifest === v1Entry.manifest) {\r\n          throw new Error('You cannot have two config entries for the same manifest.');\r\n        }\r\n      });\r\n\r\n      existingConfig.entries.push(v1Entry);\r\n    } else {\r\n      const existingConfig: IConfigJson = this._data as IConfigJson;\r\n\r\n      if (existingConfig.bundles[name]) {\r\n        throw new Error('You cannot have two config bundles with the same output name.');\r\n      }\r\n\r\n      for (const configBundleName in existingConfig.bundles) { // tslint:disable-line:forin\r\n        const configBundle: IConfigBundle = existingConfig.bundles[configBundleName];\r\n        for (const component of configBundle.components) {\r\n          for (const newComponent of bundleEntry.components) {\r\n            if (component.manifest === newComponent.manifest) {\r\n              throw new Error('You cannot have two config entries for the same manifest.');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      existingConfig.bundles[name] = bundleEntry;\r\n    }\r\n  }\r\n\r\n  public addLocalizedResource(localizedResourceKey?: string, localizedResourcePath?: string): void {\r\n    if (localizedResourceKey && !localizedResourcePath ||\r\n       !localizedResourceKey && localizedResourcePath) {\r\n      throw new Error(`When adding a localized resource, both localized resource key and path must be specified`);\r\n    }\r\n\r\n    if (this._data.localizedResources[localizedResourceKey] &&\r\n        this._data.localizedResources[localizedResourceKey] !== localizedResourcePath) {\r\n      throw new Error(`A localized resource with the key \"${localizedResourceKey}\" already exists in \"config.json\"`);\r\n    }\r\n\r\n    this._data.localizedResources[localizedResourceKey] = localizedResourcePath;\r\n  }\r\n\r\n  private constructor(\r\n    filepath: string,\r\n    fs: yeoman.MemFsEditor,\r\n    data: IConfigJson | IV1ConfigJson,\r\n    public configJsonIsV1: boolean\r\n  ) {\r\n    super(filepath, fs, data);\r\n  }\r\n\r\n  private _translateV2BundleIntoV1(bundle: IConfigBundle, name: string): IConfigEntry {\r\n    if (bundle.components.length !== 1) {\r\n      throw new Error('New bundle must have exactly one entry');\r\n    }\r\n\r\n    return {\r\n      entry: bundle.components[0].entrypoint,\r\n      manifest: bundle.components[0].manifest,\r\n      outputPath: `./dist/${name}.js`\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}