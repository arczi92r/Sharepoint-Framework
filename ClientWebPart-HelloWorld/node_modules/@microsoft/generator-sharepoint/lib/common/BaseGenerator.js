"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const UpdateNotifier = require("update-notifier");
const yeoman = require("yeoman-generator");
const Utils = require("./utilities");
const PackageJsonManager_1 = require("./PackageJsonManager");
const ConfigJsonManager_1 = require("./ConfigJsonManager");
const ServeJsonManager_1 = require("./ServeJsonManager");
const PackageSolutionJsonManager_1 = require("./PackageSolutionJsonManager");
const YeomanConfiguration_1 = require("./YeomanConfiguration");
class BaseGenerator extends yeoman {
    // tslint:enable:no-any
    constructor(args, options) {
        // Always overwrite the conflict files, without any prompting.
        super(args, (!(options.force = true)) || options);
        this.allowEmptyPackageJson = false;
        this.context = {};
        // tslint:disable:no-string-literal
        YeomanConfiguration_1.YeomanConfiguration.setStore(this['config']);
        BaseGenerator._checkForUpdates();
        this.option('skip-install', {
            type: Boolean,
            description: 'Skip running package managers (NPM, etc) post scaffolding',
            default: false
        });
    }
    get packageJson() {
        if (!PackageJsonManager_1.PackageJsonManager.instance) {
            PackageJsonManager_1.PackageJsonManager.load(this.destinationPath('package.json'), this.fs);
        }
        if (!this.allowEmptyPackageJson && !PackageJsonManager_1.PackageJsonManager.instance.data) {
            throw new Error(`Cannot find "package.json" file required by this generator`);
        }
        return PackageJsonManager_1.PackageJsonManager.instance;
    }
    get configJson() {
        if (!ConfigJsonManager_1.ConfigJsonManager.instance) {
            ConfigJsonManager_1.ConfigJsonManager.load(this.destinationPath('config/config.json'), this.fs);
        }
        return ConfigJsonManager_1.ConfigJsonManager.instance;
    }
    get serveJson() {
        if (!ServeJsonManager_1.ServeJsonManager.instance) {
            ServeJsonManager_1.ServeJsonManager.load(this.destinationPath('config/serve.json'), this.fs);
        }
        return ServeJsonManager_1.ServeJsonManager.instance;
    }
    get packageSolutionJson() {
        if (!PackageSolutionJsonManager_1.PackageSolutionJsonManager.instance) {
            PackageSolutionJsonManager_1.PackageSolutionJsonManager.load(this.destinationPath('config/package-solution.json'), this.fs);
        }
        return PackageSolutionJsonManager_1.PackageSolutionJsonManager.instance;
    }
    static _checkForUpdates() {
        if (!BaseGenerator._hasCheckedForUpdates) {
            const update = new UpdateNotifier.UpdateNotifier({ pkg: BaseGenerator.generatorPackageJson });
            update.notify({
                defer: false
            }); /* tslint:disable-line:no-any */
        }
        BaseGenerator._hasCheckedForUpdates = true;
    }
    /** Where you write the generator specific files (routes, controllers, etc) */
    writing(shouldCopy = true) {
        // Update config to add the webpart entry.
        this.configJson.save();
        // Update package.json dependencies and trigger npm install if necessary.
        this.packageJson.save();
        // Update serve.json to add the new serve configuration.
        this.serveJson.save();
        // Update package-solution.json to add the new packaging configuration.
        this.packageSolutionJson.save();
        if (shouldCopy) {
            this.copyTemplate(this.sourceRoot(), this.destinationRoot());
        }
    }
    // tslint:disable-next-line:no-any
    tryInstall() {
        const shouldInstall = !this.options['skip-install'];
        if (shouldInstall) {
            this.npmInstall();
        }
        return shouldInstall;
    }
    copyTemplate(sourceDirectory, destinationDir) {
        Utils.filesIn(sourceDirectory).map(this._untokenizedCopier(sourceDirectory, destinationDir));
    }
    ensureDependencyGroup(group) {
        const dependencyList = this._getDependencies(group);
        if (!this.packageJson.data.dependencies) {
            this.packageJson.data.dependencies = {};
        }
        if (group === 'webpart' || group === 'extension') {
            const firstPartyDependencies = require(path.join(__dirname, 'dependency', group, YeomanConfiguration_1.YeomanConfiguration.environment !== 'onprem' ? 'firstParty' : 'onPremFirstParty' + '.json'));
            const thirdPartyDependencies = require(path.join(__dirname, 'dependency', 'thirdParty.json'));
            this.packageJson.merge(firstPartyDependencies);
            this.packageJson.merge(thirdPartyDependencies);
        }
        Object.keys(dependencyList).forEach(name => {
            this.packageJson.addDependency(name, dependencyList[name]);
        });
    }
    _getDependencies(group) {
        return (this._dependencyGroups[group] || {})['dependencies'] || {};
    }
    /* tslint:disable-next-line:no-any */
    get _dependencyGroups() {
        if (!this._dependencyGroupMap) {
            this._dependencyGroupMap = {};
            this._dependencyGroupMap['react'] = require(path.join(__dirname, 'dependency', YeomanConfiguration_1.YeomanConfiguration.environment !== 'onprem' ? 'react.json' : 'onPremReact.json'));
            this._dependencyGroupMap['knockout'] = require(path.join(__dirname, 'dependency', 'knockout.json'));
            this._dependencyGroupMap['applicationCustomizer'] = require(path.join(__dirname, 'dependency', 'applicationCustomizer.json')); // tslint:disable-line:max-line-length
            this._dependencyGroupMap['fieldCustomizer'] = require(path.join(__dirname, 'dependency', 'fieldCustomizer.json'));
            this._dependencyGroupMap['commandSet'] = require(path.join(__dirname, 'dependency', 'commandSet.json'));
        }
        return this._dependencyGroupMap;
    }
    _untokenizedCopier(directory, destination) {
        return (filename) => {
            const sourceFile = path.join(directory, filename);
            const destinationFile = path.join(destination, Utils.untokenize(filename, this.context));
            this.fs.copyTpl(sourceFile, destinationFile, this.context);
        };
    }
}
/* tslint:disable-next-line:no-any */
BaseGenerator.generatorPackageJson = require('../../package.json');
BaseGenerator._hasCheckedForUpdates = false;
exports.BaseGenerator = BaseGenerator;

//# sourceMappingURL=BaseGenerator.js.map
