{"version":3,"sources":["common/spsay.ts"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,iCAAkC;AAElC,MAAM,IAAI,GAAa;IACrB,wBAAwB;IACxB,wBAAwB;IACxB,wBAAwB;IACxB,yBAAyB;IACzB,wBAAwB;IACxB,wBAAwB;IACxB,wBAAwB;IACxB,wBAAwB;IACxB,wBAAwB;CACzB,CAAC;AAEF,eAAe,CAAS,EAAE,SAAiB;IACzC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACnD,CAAC;AAED,eAAe,CAAS;IACtB,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AACvB,CAAC;AAED,kBAAkB,YAAoB;IACpC,MAAM,KAAK,GAAa;QACtB,kBAAkB;QAClB,WAAW,GAAG,YAAY,GAAG,cAAc;QAC3C,iCAAiC;KAClC,CAAC;IAEF,MAAM,UAAU,GAAa;QAC3B,kBAAkB;QAClB,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,cAAc;QACvD,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,mBAAmB;KAC1D,CAAC;IAEF,MAAM,SAAS,GAAW,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACpF,MAAM,SAAS,GAAa,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK;QACrD,MAAM,OAAO,GAAW,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;QACxD,MAAM,YAAY,GAAW,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QACrD,MAAM,WAAW,GAAW,OAAO,GAAG,YAAY,CAAC;QACnD,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,MAAM,OAAO,GAAa,CAAC,EAAE,CAAC;SAC3B,MAAM,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;SAC/C,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC;SACnD,MAAM,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IAEnD,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC;AAED,eAA8B,YAAoB;IAChD,MAAM,SAAS,GAAa,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,MAAM,KAAK,GAAa,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC/C,MAAM,KAAK,GAAa,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAClF,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AACxC,CAAC;AALD,wBAKC","file":"common/spsay.js","sourcesContent":["import * as chalk from 'chalk';\r\nimport lodash = require('lodash');\r\n\r\nconst logo: string[] = [\r\n  '      _=+#####!       ',\r\n  '   ###########|       ',\r\n  '   ###/    (##|(@)    ',\r\n  '   ###  ######|   \\\\   ',\r\n  '   ###/   /###|   (@) ',\r\n  '   #######  ##|   /   ',\r\n  '   ###     /##|(@)    ',\r\n  '   ###########|       ',\r\n  '      **=+####!       '\r\n];\r\n\r\nfunction times(n: number, character: string): string {\r\n  return lodash.times(n, () => character).join('');\r\n}\r\n\r\nfunction space(n: number): string {\r\n  return times(n, ' ');\r\n}\r\n\r\nfunction getWords(solutionName: string): string[] {\r\n  const words: string[] = [\r\n    'Congratulations!',\r\n    'Solution ' + solutionName + ' is created.',\r\n    'Run gulp serve to play with it!'\r\n  ];\r\n\r\n  const colorWords: string[] = [\r\n    'Congratulations!',\r\n    'Solution ' + chalk.cyan(solutionName) + ' is created.',\r\n    'Run ' + chalk.yellow('gulp serve') + ' to play with it!'\r\n  ];\r\n\r\n  const maxLength: number = Math.max.apply(undefined, words.map(word => word.length));\r\n  const formatted: string[] = colorWords.map((word, index) => {\r\n    const padding: number = maxLength - words[index].length;\r\n    const rightPadding: number = Math.floor(padding / 2);\r\n    const leftPadding: number = padding - rightPadding;\r\n    return space(leftPadding) + word + space(rightPadding);\r\n  });\r\n\r\n  const wrapped: string[] = ['']\r\n    .concat(['.' + times(maxLength + 4, '-') + '.'])\r\n    .concat(formatted.map(word => '|  ' + word + '  |'))\r\n    .concat([\"'\" + times(maxLength + 4, '-') + \"'\"]);\r\n\r\n  return wrapped;\r\n}\r\n\r\nexport default function spsay(solutionName: string): string {\r\n  const colorLogo: string[] = logo.map(line => chalk.cyan(line));\r\n  const words: string[] = getWords(solutionName);\r\n  const lines: string[] = lodash.zip(colorLogo, words).map(parts => parts.join(''));\r\n  return '\\n' + lines.join('\\n') + '\\n';\r\n}\r\n"],"sourceRoot":"..\\..\\src"}