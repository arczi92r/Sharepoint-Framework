{"version":3,"sources":["webparts/portal/PortalWebPart.ts"],"names":[],"mappings":"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","file":"webparts/portal/PortalWebPart.js","sourcesContent":["import { Version } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField\r\n} from '@microsoft/sp-webpart-base';\r\nimport { escape } from '@microsoft/sp-lodash-subset';\r\nimport MockHttpClient from './MockHttpClient'\r\n\r\nimport styles from './PortalWebPart.module.scss';\r\nimport * as strings from 'PortalWebPartStrings';\r\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\r\nimport {SPHttpClient} from '@microsoft/sp-http';\r\nexport interface ISPLists {\r\n value: ISPList[];\r\n}\r\nexport interface ISPList {\r\nEmployeeId: string;\r\nEmployeeName: string;\r\nExperience: string;\r\nLocation: string;\r\n}\r\nexport interface IPortalWebPartProps {\r\n  description: string;\r\n}\r\nwindow.onload = () => {\r\n  alert(\"siemanko\");\r\n}\r\nexport default class PortalWebPart extends BaseClientSideWebPart<IPortalWebPartProps> {\r\n\r\npublic render(): void {\r\n this.domElement.innerHTML = `\r\n <div class=\"${styles.portal}\">\r\n <div class=\"${styles.container}\">\r\n<div class=\"ms-Grid-row ms-bgColor-themeDark ms-fontColor-white ${styles.row}\">\r\n <div class=\"ms-Grid-col ms-u-lg10 ms-u-xl8 ms-u-xlPush2 ms-u-lgPush1\">\r\n <span class=\"ms-font-xl ms-fontColor-white\" style=\"font-size:28px\">Welcome to\r\nSharePoint Framework Development</span>\r\n\r\n<p class=\"ms-font-l ms-fontColor-white\" style=\"text-align: center\">Demo :\r\nRetrieve Employee Data from SharePoint List</p>\r\n </div>\r\n</div>\r\n <div class=\"ms-Grid-row ms-bgColor-themeDark ms-fontColor-white ${styles.row}\">\r\n <div style=\"background-color:Black;color:white;text-align: center;font-weight:\r\nbold;font-size:18px;\">Employee Details</div>\r\n <br>\r\n<div id=\"spListContainer\" />\r\n </div>\r\n </div>\r\n </div>`;\r\n this._renderListAsync();\r\n}\r\n\r\n\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('description', {\r\n                  label: strings.DescriptionFieldLabel\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private _renderListAsync(): void {\r\n\r\n if (Environment.type === EnvironmentType.Local) {\r\n      this._getMockListData().then((response) => {\r\n      this._renderList(response.value);\r\n      });\r\n        }\r\n      else {\r\n            this._getListData()\r\n              .then((response) => {\r\n              this._renderList(response.value);});\r\n          }           \r\n}\r\n private _renderList(items: ISPList[]): void {\r\n let html: string = '<table class=\"TFtable\" border=1 width=100% style=\"border-collapse:collapse;\">';\r\nhtml +=\r\n`<th>EmployeeId</th><th>EmployeeName</th><th>Experience</th><th>Location</th>`;\r\n items.forEach((item: ISPList) => {html += `<tr>\r\n <td>${item.EmployeeId}</td>\r\n <td>${item.EmployeeName}</td>\r\n <td>${item.Experience}</td>\r\n <td>${item.Location}</td>\r\n</tr>`; }); html += `</table>`;\r\n const listContainer: Element = this.domElement.querySelector('#spListContainer');\r\n listContainer.innerHTML = html;\r\n}\r\n\r\nprivate _getListData(): Promise<ISPLists> {\r\nreturn this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl +\r\n`/_api/web/lists/GetByTitle('EmployeeList')/Items`, SPHttpClient.configurations.v1).then((response: Response) => {\r\ndebugger;\r\n return response.json();\r\n});\r\n }\r\n private _getMockListData(): Promise<ISPLists> {\r\nreturn MockHttpClient.get(this.context.pageContext.web.absoluteUrl).then(()=> {\r\n const listData: ISPLists = {\r\n value:[{ EmployeeId: 'E123', EmployeeName: 'John', Experience:'SharePoint',Location: 'India' },\r\n{ EmployeeId: 'E567', EmployeeName: 'Martin', Experience:'.NET',Location: 'Qatar' },\r\n{ EmployeeId: 'E367', EmployeeName: 'Luke', Experience:'JAVA',Location: 'UK' }]};\r\n return listData;}) as Promise<ISPLists>;\r\n}\r\n\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}